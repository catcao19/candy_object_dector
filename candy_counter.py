# -*- coding: utf-8 -*-
"""candy_counter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SHti2mYAteepev1MJDRIzIzg9gzvJvDZ
"""

import tarfile
file = tarfile.open('/content/drive/MyDrive/Colab Notebooks/candy_counter/models.tar.gz')
file.extractall()
file.close()

# Commented out IPython magic to ensure Python compatibility.
# %run config.py

if not os.path.exists(os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection')):
  !git clone https://github.com/tensorflow/models {paths['APIMODEL_PATH']}

!apt-get install protobuf-compiler
!cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && cp object_detection/packages/tf2/setup.py . && python -m pip install .

!pip install tensorflow --upgrade
!pip uninstall protobuf matplotlib -y
!pip install protobuf==3.19 matplotlib==3.2
!pip install -U opencv-python

!pip uninstall imgaug
!pip install imgaug==0.2.5

"""**Restart Runtime and Run config.py again**"""

# Commented out IPython magic to ensure Python compatibility.
# %run config.py

import os
import tensorflow as tf
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as viz_utils
from object_detection.builders import model_builder
from object_detection.utils import config_util

# Load pipeline config and build a detection model
configs = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])
detection_model = model_builder.build(model_config=configs['model'], is_training=False)

# Restore checkpoint
ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)
ckpt.restore(os.path.join(paths['CHECKPOINT_PATH'], 'ckpt-3')).expect_partial()

@tf.function
def detect_fn(image):
    image, shapes = detection_model.preprocess(image)
    prediction_dict = detection_model.predict(image, shapes)
    detections = detection_model.postprocess(prediction_dict, shapes)
    return detections

# Commented out IPython magic to ensure Python compatibility.
import cv2 
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline

"""**upload label_map.pbtxt to Tensorflow/workspace/Annotations**"""

category_index = label_map_util.create_category_index_from_labelmap(files['LABELMAP'])

image_path = '/content/drive/MyDrive/Colab Notebooks/candy_counter/cd_35.jpg'

img = cv2.imread(image_path)
image_np = np.array(img)

input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
detections = detect_fn(input_tensor)

num_detections = int(detections.pop('num_detections'))
detections = {key: value[0, :num_detections].numpy()
              for key, value in detections.items()}
detections['num_detections'] = num_detections

# detection_classes should be ints.
detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

label_id_offset = 1
image_np_with_detections = image_np.copy()

viz_utils.visualize_boxes_and_labels_on_image_array(
            image_np_with_detections,
            detections['detection_boxes'],
            detections['detection_classes']+label_id_offset,
            detections['detection_scores'],
            category_index,
            use_normalized_coordinates=True,
            max_boxes_to_draw=30,
            min_score_thresh=.6,
            agnostic_mode=False)

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111)
ax.imshow(cv2.cvtColor(image_np_with_detections, cv2.COLOR_BGR2RGB))
plt.show()

detections['detection_classes']

category_index

type(detections)

#detections['detection_boxes']

detections['detection_scores']

import pandas as pd

score = []
box = []
labels = []
n = len(detections['detection_scores'])
def candy_counter (img):
  for i in range(n):
    if detections['detection_scores'][i] >= 0.55:
      score.append(detections['detection_scores'][i])
      box.append(str(detections['detection_boxes'][i]))
      labels.append(int(detections['detection_classes'][i]+1))
  candies = pd.DataFrame({'score': score,
                          'box': box,
                          'label': labels})
  candies = candies.sort_values('score', ascending = False).drop_duplicates(['box'])
  counts = dict({'Moon': 0,
                'Insect': 0,
                'Black_star': 0,
                'Grey_star': 0,
                'Unicorn_whole': 0,
                'Unicorn_head': 0,
                'Owl': 0,
                'Cat': 0})

  object_labels = list(candies['label'])

  for i in range(len(object_labels)) :
    label = category_index[object_labels[i]]['name']
    counts[label] += 1

  return counts

image_path = '/content/drive/MyDrive/Colab Notebooks/candy_counter/cd_35.jpg'
img = cv2.imread(image_path)
candy_counter(img)

